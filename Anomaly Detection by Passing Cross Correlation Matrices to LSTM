{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "hide_input": false,
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\" style=\"margin-top: 1em;\"><ul class=\"toc-item\"><li><span><a href=\"#Imports\" data-toc-modified-id=\"Imports-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Imports</a></span></li><li><span><a href=\"#Data-Prep\" data-toc-modified-id=\"Data-Prep-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Data Prep</a></span><ul class=\"toc-item\"><li><span><a href=\"#Workflow\" data-toc-modified-id=\"Workflow-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Workflow</a></span></li><li><span><a href=\"#Build-Sqlite-Data-Base\" data-toc-modified-id=\"Build-Sqlite-Data-Base-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Build Sqlite Data Base</a></span></li><li><span><a href=\"#Clean-Data\" data-toc-modified-id=\"Clean-Data-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Clean Data</a></span></li><li><span><a href=\"#Create-SVID-Columns\" data-toc-modified-id=\"Create-SVID-Columns-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Create SVID Columns</a></span></li><li><span><a href=\"#Normalize-Signal-Data\" data-toc-modified-id=\"Normalize-Signal-Data-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>Normalize Signal Data</a></span></li><li><span><a href=\"#Generate-Files-with-Different-Sampling-Rates\" data-toc-modified-id=\"Generate-Files-with-Different-Sampling-Rates-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;</span>Generate Files with Different Sampling Rates</a></span></li><li><span><a href=\"#Calculate-Cross-Correlation-Matrix-(CCM)\" data-toc-modified-id=\"Calculate-Cross-Correlation-Matrix-(CCM)-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;</span>Calculate Cross Correlation Matrix (CCM)</a></span></li><li><span><a href=\"#Shape-SigCCM-Data-for-LSTM-Input\" data-toc-modified-id=\"Shape-SigCCM-Data-for-LSTM-Input-2.8\"><span class=\"toc-item-num\">2.8&nbsp;&nbsp;</span>Shape SigCCM Data for LSTM Input</a></span><ul class=\"toc-item\"><li><span><a href=\"#Add-LSTM-Steps\" data-toc-modified-id=\"Add-LSTM-Steps-2.8.1\"><span class=\"toc-item-num\">2.8.1&nbsp;&nbsp;</span>Add LSTM Steps</a></span></li><li><span><a href=\"#IO-Tools\" data-toc-modified-id=\"IO-Tools-2.8.2\"><span class=\"toc-item-num\">2.8.2&nbsp;&nbsp;</span>IO Tools</a></span></li><li><span><a href=\"#Store-LSTM-Ready-Data-in-HDF5-for-Use-by-Generators\" data-toc-modified-id=\"Store-LSTM-Ready-Data-in-HDF5-for-Use-by-Generators-2.8.3\"><span class=\"toc-item-num\">2.8.3&nbsp;&nbsp;</span>Store LSTM-Ready Data in HDF5 for Use by Generators</a></span></li></ul></li><li><span><a href=\"#Save-Files\" data-toc-modified-id=\"Save-Files-2.9\"><span class=\"toc-item-num\">2.9&nbsp;&nbsp;</span>Save Files</a></span><ul class=\"toc-item\"><li><span><a href=\"#Save-Pickled-Files\" data-toc-modified-id=\"Save-Pickled-Files-2.9.1\"><span class=\"toc-item-num\">2.9.1&nbsp;&nbsp;</span>Save Pickled Files</a></span></li><li><span><a href=\"#Save-to-Dill-File\" data-toc-modified-id=\"Save-to-Dill-File-2.9.2\"><span class=\"toc-item-num\">2.9.2&nbsp;&nbsp;</span>Save to Dill File</a></span></li><li><span><a href=\"#Save-to-HDF5-File\" data-toc-modified-id=\"Save-to-HDF5-File-2.9.3\"><span class=\"toc-item-num\">2.9.3&nbsp;&nbsp;</span>Save to HDF5 File</a></span></li><li><span><a href=\"#Save-to-PyArrow-Parquet-File\" data-toc-modified-id=\"Save-to-PyArrow-Parquet-File-2.9.4\"><span class=\"toc-item-num\">2.9.4&nbsp;&nbsp;</span>Save to PyArrow-Parquet File</a></span></li></ul></li><li><span><a href=\"#Load-Files\" data-toc-modified-id=\"Load-Files-2.10\"><span class=\"toc-item-num\">2.10&nbsp;&nbsp;</span>Load Files</a></span><ul class=\"toc-item\"><li><span><a href=\"#Load-from-Pickled-Files\" data-toc-modified-id=\"Load-from-Pickled-Files-2.10.1\"><span class=\"toc-item-num\">2.10.1&nbsp;&nbsp;</span>Load from Pickled Files</a></span></li><li><span><a href=\"#Load-from-HDF5-File\" data-toc-modified-id=\"Load-from-HDF5-File-2.10.2\"><span class=\"toc-item-num\">2.10.2&nbsp;&nbsp;</span>Load from HDF5 File</a></span></li><li><span><a href=\"#Load-from-PyArrow-Parquet-File\" data-toc-modified-id=\"Load-from-PyArrow-Parquet-File-2.10.3\"><span class=\"toc-item-num\">2.10.3&nbsp;&nbsp;</span>Load from PyArrow-Parquet File</a></span></li></ul></li></ul></li><li><span><a href=\"#Data-Generator\" data-toc-modified-id=\"Data-Generator-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Data Generator</a></span><ul class=\"toc-item\"><li><span><a href=\"#Generator-in-a-Python-Class\" data-toc-modified-id=\"Generator-in-a-Python-Class-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Generator in a Python Class</a></span></li><li><span><a href=\"#Generator-Based-on-Numpy-IO\" data-toc-modified-id=\"Generator-Based-on-Numpy-IO-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Generator Based on Numpy IO</a></span></li><li><span><a href=\"#Generator-Based-on-HD5-IO\" data-toc-modified-id=\"Generator-Based-on-HD5-IO-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;</span>Generator Based on HD5 IO</a></span></li></ul></li><li><span><a href=\"#LSTM\" data-toc-modified-id=\"LSTM-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>LSTM</a></span><ul class=\"toc-item\"><li><span><a href=\"#Build-the-LSTM-Model\" data-toc-modified-id=\"Build-the-LSTM-Model-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Build the LSTM Model</a></span><ul class=\"toc-item\"><li><span><a href=\"#Step-12,-Sampled-Data,-100-Epochs\" data-toc-modified-id=\"Step-12,-Sampled-Data,-100-Epochs-4.1.1\"><span class=\"toc-item-num\">4.1.1&nbsp;&nbsp;</span>Step 12, Sampled Data, 100 Epochs</a></span><ul class=\"toc-item\"><li><span><a href=\"#Make-Predictions-and-Plot-ROC-AUC-Metric\" data-toc-modified-id=\"Make-Predictions-and-Plot-ROC-AUC-Metric-4.1.1.1\"><span class=\"toc-item-num\">4.1.1.1&nbsp;&nbsp;</span>Make Predictions and Plot ROC-AUC Metric</a></span></li></ul></li><li><span><a href=\"#5000-Records-of-Attack-Data,-100-Epochs\" data-toc-modified-id=\"5000-Records-of-Attack-Data,-100-Epochs-4.1.2\"><span class=\"toc-item-num\">4.1.2&nbsp;&nbsp;</span>5000 Records of Attack Data, 100 Epochs</a></span><ul class=\"toc-item\"><li><span><a href=\"#Make-Predictions-and-Plot-ROC-AUC-Metric\" data-toc-modified-id=\"Make-Predictions-and-Plot-ROC-AUC-Metric-4.1.2.1\"><span class=\"toc-item-num\">4.1.2.1&nbsp;&nbsp;</span>Make Predictions and Plot ROC-AUC Metric</a></span></li></ul></li></ul></li><li><span><a href=\"#Stacked-LSTMs\" data-toc-modified-id=\"Stacked-LSTMs-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Stacked LSTMs</a></span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Make-Predictions-and-Plot-ROC-AUC-Metric\" data-toc-modified-id=\"Make-Predictions-and-Plot-ROC-AUC-Metric-4.2.0.1\"><span class=\"toc-item-num\">4.2.0.1&nbsp;&nbsp;</span>Make Predictions and Plot ROC-AUC Metric</a></span></li></ul></li></ul></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import pickle as pkl\n",
    "import pyarrow as pa\n",
    "import pyarrow.parquet as pq\n",
    "import collections\n",
    "import itertools\n",
    "import keras\n",
    "import math\n",
    "import h5py\n",
    "import os\n",
    "\n",
    "# os\n",
    "from os import mkdir\n",
    "\n",
    "# pandas\n",
    "# from pandas import read_csv \n",
    "# from pandas import datetime \n",
    "from pandas.plotting import autocorrelation_plot\n",
    "\n",
    "# scipy\n",
    "from scipy import sparse\n",
    "from scipy import signal\n",
    "from scipy.signal import correlate\n",
    "from scipy.signal import correlate2d\n",
    "from scipy.sparse import coo_matrix, vstack\n",
    "\n",
    "# statsmodels\n",
    "# from statsmodels.tsa.arima_model import ARIMA \n",
    "\n",
    "# sci-kit learn\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# matplotlib\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# sqlite\n",
    "# from sqlalchemy import create_engine\n",
    "# from flask.ext.sqlalchemy import SQLAlchemy\n",
    "# from flask_sqlalchemy import SQLAlchemy\n",
    "# from sqlalchemy import create_engine\n",
    "\n",
    "# sci-kit learn\n",
    "# from sklearn.decomposition import PCA\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# keras\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.callbacks import EarlyStopping\n",
    "from keras.layers import TimeDistributed\n",
    "from keras.models import Sequential\n",
    "from keras.models import Model\n",
    "from keras.layers import Dense\n",
    "from keras.layers import LSTM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Prep"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Workflow \n",
    "  \n",
    "1. Extract Data on TORGI\n",
    "   * Table join on jupyterhub to merge AGC, CN0 and local timestamp info\n",
    "   * Generate CSV file\n",
    "2. Build Sqlite Data Base\n",
    "   * Read CSV file and load into sqlite db in chunks to avoid using enormous CSV files and make data more accessible\n",
    "3. Clean Data\n",
    "   * Load dataframe, change time stamps to 64 bit integers\n",
    "   * Sort data by local time \n",
    "   * Reindex dataframe\n",
    "   * Remove NaN Values from Attack Column\n",
    "4. Data Wrangling\n",
    "   * Limit Data to Days with Jamming\n",
    "   * Create SVID Columns, one for each AGC & CN0 signal\n",
    "   * Normalize Signal Data\n",
    "   * Generate files with different sampling rates\n",
    "     (because memory is a **_huge_** problem).\n",
    "5. Number Crunching and More Data Wrangling\n",
    "   * Select various lookahead time windows in which to do Cross Correlation\n",
    "   * Calculate normalized Cross Correlation Matrix (CCM) \n",
    "   * Flatten CCM and append to each row in separate column\n",
    "6. Shape SigCCM Data for LSTM Input (i.e. more Data Wrangling)\n",
    "   * In addition to the CCM time window, create time sequence windows for the LSTM\n",
    "   * Wrangle data, converting column with CCMs into a column of nested sequences of CCMs of predetermined length. With 5,000 records of jamming data, this produces a huge 20GB file\n",
    "7. Store LSTM-Ready Data in HDF5 for Use by Data Generators \n",
    "8. Create Data Generator that can feed chunks of the 20GB file into Keras, batch by batch\n",
    "9. Define various LSTM models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.2.0'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scipy.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build Sqlite Data Base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "filepath = 'CSV Files/combined.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# csv_database = create_engine('sqlite:///csv_database.db')\n",
    "csv_database = create_engine('sqlite:///combined.db')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "chunksize = 100000\n",
    "i, j = 0, 1\n",
    "for df in pd.read_csv(filepath, chunksize=chunksize, iterator=True):\n",
    "    df = df.rename(columns={c: c.replace(' ', '_') for c in df.columns}) \n",
    "    # shift up all index values by j\n",
    "    df.index += j\n",
    "    i += 1\n",
    "    df.to_sql('table', csv_database, if_exists='append')\n",
    "    # take highest index value and add one\n",
    "    # (don't know the index of the highest index, so use -1)\n",
    "    j = df.index[-1] + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOTE: Sqlite apparently requires you to put the table name between quotes. See this [Stackoverflow article](https://stackoverflow.com/questions/25387537/inserting-a-table-name-into-a-query-gives-sqlite3-operationalerror-near-sy)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# id, svid, constellation, cn0, agc, has_agc, sat_time_nanos\n",
    "# fields = \"id, svid, constellation, cn0, agc, has_agc, sat_time_nanos\"\n",
    "# fields = \"constellation, cn0, agc, has_agc, sat_time_nanos\"\n",
    "# fields = \"cn0, agc\"\n",
    "# sql_string = 'SELECT ' + fields + ' FROM table'\n",
    "# sql_string = 'SELECT * FROM \"table\" LIMIT 5'\n",
    "flds = \"svid, constellation, cn0, agc, local_time, sat_time_nanos, attack\"\n",
    "sql_string = 'SELECT ' + flds + ' FROM \"table\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_combined = pd.read_sql_query(sql_string, csv_database)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_combined[df_combined[\"Attack\"] == 1].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert Time Stamps and SVID from Float to 64bit Integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sat_time_nanos = df_combined[\"sat_time_nanos\"]\n",
    "localtime = df_combined[\"local_time\"]\n",
    "svids = df_combined[\"svid\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sat_time_nanos = sat_time_nanos.astype('int64')\n",
    "localtime = localtime.astype('int64') \n",
    "svids = svids.astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_combined[\"sat_time_nanos\"] = sat_time_nanos\n",
    "df_combined[\"local_time\"] = localtime\n",
    "df_combined[\"svid\"] = svids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sort Data by Local Time Stamp and Reindex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# colheader = 'sat_time_nanos'\n",
    "colheader = 'local_time'\n",
    "df_combined_sorted = df_combined.sort_values(colheader).copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_combined_sorted.index = range(len(df_combined_sorted))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove NaN Values from Attack Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "values = {\"Attack\": False}\n",
    "df_combined_sorted = df_combined_sorted.fillna(value = values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_combined_sorted[\"Attack\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Limit Days to Days with Jamming.\n",
    "\n",
    "Reasoning:\n",
    "* Assuming this will probably not cause data imbalance, based on Tracey's statement that pervasive jamming might represent actual conditions and \n",
    "* We don't know how to label much of the data we have. We cannot assume the absence of a True Attack label means Attack = False necessarily. \n",
    "\n",
    "Hao's calculated range of local time stamps on jamming days:\n",
    "* local time for 10/3/2018 00:00 is 1538264040000 \n",
    "* local time for 10/6/2018 00:00 is 1538523240000 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "(df_combined_sorted[\"local_time\"].min(), \n",
    " df_combined_sorted[\"local_time\"].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_jamming = df_combined_sorted[\n",
    "    df_combined_sorted[\"local_time\"] >= 1538264040000 # 1538264040000 \n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_jamming = df_combined_sorted[\n",
    "    df_combined_sorted[\"local_time\"] >= 0 # 1538264040000 \n",
    "]\n",
    "df_jamming[\"Attack\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_jamming = df_jamming[\n",
    "     (df_jamming[\"local_time\"] <= 1538523240000) # 1538523240000\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create SVID Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_headers(df): \n",
    "    \n",
    "    svids = df[\"svid\"].unique()\n",
    "    svids = list(svids)\n",
    "\n",
    "    svidhdrs = []\n",
    "    \n",
    "    # create separate AGC & CN0 labels for each\n",
    "    # of the 106 AGC & CN0 signals.\n",
    "    for svid in svids:       \n",
    "        agc_nm = \"agc_\" + \"{:003d}\".format(svid)  \n",
    "        cn0_nm = \"cn0_\" + \"{:003d}\".format(svid) \n",
    "        svidhdrs.append(agc_nm)\n",
    "        svidhdrs.append(cn0_nm)\n",
    "\n",
    "    svidhdrs.sort()\n",
    "\n",
    "    # Since we have separate AGC & CN0 signals for\n",
    "    # each of the 106 signals, eliminate the original\n",
    "    # AGC & CN0 labels (without number suffixes)\n",
    "    dfcols = list(df.columns)\n",
    "    dfcols.remove('svid')\n",
    "    dfcols.remove('cn0')\n",
    "    dfcols.remove('agc')    \n",
    "    dfcols.remove('constellation')\n",
    "    dfcols.remove('sat_time_nanos')    \n",
    "    \n",
    "    colhdrs = dfcols + svidhdrs\n",
    "    \n",
    "    # Return signal IDs and (new) revised column headers\n",
    "    return svids, colhdrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def create_svid_cols(df):\n",
    "\n",
    "    svids, colhdrs = get_headers(df) \n",
    "    df_new = pd.DataFrame(columns = colhdrs)\n",
    "    # Create a first row of zeros\n",
    "    d = {k:0 for k in colhdrs}    \n",
    "    df_new.loc[0] = d # first row\n",
    "    \n",
    "    lt_previous = -1      \n",
    "    \n",
    "    for rowidx, row in df.iterrows():\n",
    "       \n",
    "        svid = row[\"svid\"]         \n",
    "        agc_nm = \"agc_\" + \"{:003d}\".format(svid)  \n",
    "        cn0_nm = \"cn0_\" + \"{:003d}\".format(svid)        \n",
    "\n",
    "        lt = row[\"local_time\"]\n",
    "                    \n",
    "        if lt != lt_previous and lt_previous != -1:\n",
    "            \n",
    "            # new time stamp\n",
    "                                        \n",
    "            # open up a new row in dataframe\n",
    "            nrow = len(df_new)\n",
    "            \n",
    "            # initialize new row to have same values as last row\n",
    "            lastrow = df_new.loc[nrow - 1].to_dict()\n",
    "            df_new.loc[nrow] = lastrow\n",
    "                           \n",
    "        else:\n",
    "            # load data into current (already existing) last row\n",
    "            nrow = len(df_new) - 1\n",
    "            \n",
    "        df_new.loc[nrow][agc_nm] = row[\"agc\"]\n",
    "        df_new.loc[nrow][cn0_nm] = row[\"cn0\"]\n",
    "        df_new.loc[nrow][\"Attack\"] = row[\"Attack\"]\n",
    "        df_new.loc[nrow][\"local_time\"] = lt  \n",
    "        \n",
    "        lt_previous = lt\n",
    "    \n",
    "    # This code will also output an **array** of signal info\n",
    "    # (Remove it for now)\n",
    "    \n",
    "    # df_allcolumns = df_new.copy()\n",
    "    # df_signalsonly = df_new.drop(\n",
    "    #                     [\"local_time\", \"Attack\"], axis = 1)    \n",
    "    # signalsonly = df_signalsonly.values\n",
    "    # \n",
    "    # return df_allcolumns, signalsonly\n",
    "    \n",
    "    return df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# df_signals, arr_signalsonly = create_svid_cols(df_jamming) \n",
    "\n",
    "df_signals = create_svid_cols(df_jamming)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pickle the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_signals.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_signals, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalize Signal Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do the signal values need to be normalized?\n",
    "\n",
    "Take a peak at max signal values to find out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data_cols = list(df_signals.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "local_time    1.538464e+12\n",
       "Attack        1.000000e+00\n",
       "agc_001       1.711000e+01\n",
       "agc_002       3.270000e+00\n",
       "agc_003       3.160000e+01\n",
       "agc_004       3.368000e+01\n",
       "agc_005       3.368000e+01\n",
       "agc_006       3.368000e+01\n",
       "agc_007       3.368000e+01\n",
       "agc_008       2.203000e+01\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_signals[data_cols].max()[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def normalize_signals(df):\n",
    "    \n",
    "    # initialize scaler object\n",
    "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    \n",
    "    # extract column names and remove \n",
    "    # those that are irrelevant \n",
    "    data_cols = list(df_signals_in_cols.columns)\n",
    "    data_cols.remove(\"local_time\")\n",
    "    data_cols.remove(\"Attack\")\n",
    "    \n",
    "    # extract signal values\n",
    "    vals = df[data_cols].values\n",
    "    vals = vals.astype('float32')\n",
    "    vals_norm = scaler.fit_transform(vals)\n",
    "    \n",
    "    df_norm = df.copy()\n",
    "    for idx, colname in enumerate(data_cols):\n",
    "        df_norm[colname] = vals_norm[:, idx]\n",
    "\n",
    "    return df_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_norm = normalize_signals(df_signals)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pickle the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_norm.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_norm, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Files with Different Sampling Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Filter DataFrame, selecting every *samplerate* rows (records)\n",
    "def samplerecords(df, samplerate):\n",
    "\n",
    "    indices = list(range(0, len(df), samplerate))    \n",
    "    df_filtered = df.iloc[indices]\n",
    "    \n",
    "    return df_filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(86243, 90)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4313, 90)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm_step20 = samplerecords(df_norm, 20)\n",
    "df_norm_step20.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(863, 90)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm_step100 = samplerecords(df_norm, 100)\n",
    "df_norm_step100.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(87, 90)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm_step1000 = samplerecords(df_norm, 1000)\n",
    "df_norm_step1000.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32550, 90)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm_attackperiod.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2713, 90)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_attack_step12 = samplerecords(df_norm_attackperiod, 12)\n",
    "df_attack_step12.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Go ahead and reindex this (sparsely sampled) dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_attack_step12.index = range(len(df_attack_step12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plots of labels VS. local time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ff9e1f92908>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df_attack_step12.index,\n",
    "         df_attack_step12[\"Attack\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f17265b28d0>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df_norm_step1000.index,\n",
    "         df_norm_step1000[\"Attack\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f17263b6e48>]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df_norm_attackperiod.index,\n",
    "         df_norm_attackperiod[\"Attack\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pickle the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_norm_step20.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_norm_step20, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_norm_step100.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_norm_step100, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_norm_step1000.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_norm_step1000, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate Cross Correlation Matrix (CCM)\n",
    "\n",
    "Calculate the cross correlation matrix on a sliding time window and append the contents of the ccm to the signal data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def mycorrelate(ar_signals, normalized = False):\n",
    "    \n",
    "    # initialize cross correlation matrix with zeros\n",
    "    nrows = ar_signals.shape[0]    \n",
    "    ccm = np.zeros(shape=(nrows, nrows), dtype=list)\n",
    "    \n",
    "    for i, outer_row in enumerate(ar_signals):\n",
    "        for j, inner_row in enumerate(ar_signals): \n",
    "\n",
    "            if(not normalized):\n",
    "                x = np.correlate(inner_row, outer_row) \n",
    "            else: \n",
    "                len_inner = int(len(inner_row))\n",
    "                mean_inner = np.mean(inner_row)\n",
    "                std_inner = np.std(inner_row)\n",
    "                a = (inner_row - mean_inner) / (std_inner * len_inner) \n",
    "                b = (outer_row - np.mean(outer_row)) / (\n",
    "                     np.std(outer_row)) \n",
    "                x = np.correlate(a, b) \n",
    "                    \n",
    "            ccm[i][j] = x[0] \n",
    "            \n",
    "    return ccm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**concat_ccm**\n",
    "\n",
    "* Look ahead the number of time slices specified in window parameter _win_ \n",
    "* Take the cross correlation matrix (CCM) in the window of all signals.\n",
    "* Flatten each CCM into a single (nested 2D) list\n",
    "* Each row will have a flatted CCM. Store it in the **sigccm** column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#############################################################\n",
    "# concat_ccm: \n",
    "# Description: Takes DataFrame of signals as input \n",
    "# and concatenates a flattened ccm onto each row,\n",
    "# but unlike prior version of this routine, concat_ccm\n",
    "# will save the results at regular intervals as a precaution.\n",
    "#############################################################\n",
    "\n",
    "def concat_ccm(df, win, batchID, batch_size):\n",
    "\n",
    "    DataDir = \"data/\"\n",
    "    BatchDir = DataDir + batchID + \"/\"    \n",
    "\n",
    "    # If directory does not already exist\n",
    "    # for this batch, create it.\n",
    "    if not os.path.isdir(BatchDir):\n",
    "        mkdir(BatchDir)    \n",
    "    \n",
    "    result = []    \n",
    "    width = df.shape[1]\n",
    "    length = df.shape[0]\n",
    "    \n",
    "    # Isolate signal columns in order to calculate CCM\n",
    "    value_cols = list(df.columns)\n",
    "    value_cols.remove(\"local_time\")\n",
    "    value_cols.remove(\"Attack\")\n",
    "    \n",
    "    df_values = df[value_cols]\n",
    "    \n",
    "    # Cross correlation matrix (ccm) will be a \n",
    "    # square matrix of dimensions (win X win)\n",
    "    \n",
    "    # Length of augmented row will be:\n",
    "    #    length of current row + flattened ccm (win X win)    \n",
    "    # First win-1 rows will be extended by zeros\n",
    "    for i in range(win - 1):\n",
    "        row = list(df_values.iloc[i].values)\n",
    "        zeros = np.zeros(win * win).tolist()\n",
    "        result.append(row + zeros)\n",
    "    \n",
    "    for idx, _ in enumerate(df_values.iterrows()):\n",
    "        \n",
    "        if idx + win > length:\n",
    "            break\n",
    "\n",
    "        view = df_values.iloc[idx : idx + win].values        \n",
    "        ccm = mycorrelate(view, normalized = True)\n",
    "        \n",
    "        flatmatrix = ccm.ravel().tolist()\n",
    "\n",
    "        # Attach the flattened CCM to the **end** of the window\n",
    "        # (Careful: indices change within the view)\n",
    "        # Last line of view will always have index of win - 1\n",
    "        concatenated_line = list(view[win - 1, :]) + flatmatrix \n",
    "        result.append(concatenated_line)\n",
    "        \n",
    "        if idx != 0 and idx % batch_size == 0:\n",
    "            \n",
    "            fnm = 'df_{:s}_id{:d}.pkl'.format(batchID, idx)\n",
    "            \n",
    "            df_view = df.iloc[0 : idx + win].copy()        \n",
    "            df_view[\"sigccm\"] = pd.Series(result).values\n",
    "\n",
    "            df_view[\"sigccm\"] = df_view.sigccm.apply(\n",
    "                                   lambda x: [list(x)])\n",
    "    \n",
    "            # reindex output DataFrame\n",
    "            df_view.index = range(len(df_view))\n",
    "\n",
    "            path = BatchDir + fnm\n",
    "            fd = open(path, \"wb\")\n",
    "            pkl.dump(df_view, fd)\n",
    "            fd.close()\n",
    "\n",
    "    df_augmented = df.copy()\n",
    "    df_augmented[\"sigccm\"] = pd.Series(result).values\n",
    "    \n",
    "    # Column \"sigccm\" now contains list elements.\n",
    "    # Encapsulate each list element with an extra set\n",
    "    # of list brackets to set the stage for creating\n",
    "    # a list of lists that represents the time steps\n",
    "    # of an LSTM\n",
    "    \n",
    "    df_augmented[\"sigccm\"] = df_augmented.sigccm.apply(\n",
    "                                    lambda x: [list(x)])\n",
    "\n",
    "    # reindex output DataFrame\n",
    "    df_augmented.index = range(len(df_augmented))\n",
    "    \n",
    "    return df_augmented, result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate SigCCM Training Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_augmented, res = concat_ccm(df_norm_attackperiod, \n",
    "                          win = 100,\n",
    "                          batchID = \"norm_attack\",\n",
    "                          batch_size = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_augmented, res = concat_ccm(df_attack_step12, \n",
    "                          win = 100,\n",
    "                          batchID = \"attack_step12\",\n",
    "                          batch_size = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2713, 91)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_augmented.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split SigCCM data into train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "length = len(df_augmented)\n",
    "len_train = int(length * 0.9)\n",
    "len_test = length - len_train\n",
    "df_sigccm_train = df_augmented[ : len_train]\n",
    "df_sigccm_test = df_augmented[len_train : length]\n",
    "# reindex the test data\n",
    "df_sigccm_test.index = range(len(df_sigccm_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate SigCCM Test Data for `id_attack_5000` from separate dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_attack_5000to6000 = df_norm_attackperiod[5000:6000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_augmented, res = concat_ccm(df_attack_5000to6000, \n",
    "                          win = 100,\n",
    "                          batchID = \"norm_attack\",\n",
    "                          batch_size = 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Shape SigCCM Data for LSTM Input"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add LSTM Steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just as we had a lookahead window for purposes of calculating the CCM, likewise, we now calculate a moving lookahead window to create LSTM time steps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**DataFrame Input**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def add_time_steps_df(df, win = 3):\n",
    "\n",
    "    sigccm = df[\"sigccm\"].copy()\n",
    "    \n",
    "    # Calculate the length of the list elements\n",
    "    # so we'll know how big the padding has to be\n",
    "    listlen = len(df[\"sigccm\"][0][0])\n",
    "    padding = list(np.repeat(0, listlen))\n",
    "    \n",
    "    if win < 2:\n",
    "        return sigccm\n",
    "    \n",
    "    # # First merge requires slightly different syntax\n",
    "    # # in call to combine method\n",
    "    # s = df[\"sigccm\"].apply(lambda x: x[0]).shift(-1).fillna(0)\n",
    "    # sigccm = sigccm.combine(s, lambda x1, x2: x1 + [x2])\n",
    "    # \n",
    "    # if win < 3:\n",
    "    #     return sigccm\n",
    "    \n",
    "    # Subsequent merges\n",
    "    for i in range(1, win):\n",
    "        \n",
    "        s = df[\"sigccm\"].apply(\n",
    "            lambda x: x[0]).shift(-i).fillna(0)\n",
    "            \n",
    "        sigccm = sigccm.combine(s, lambda x1, x2: x1 + [x2])\n",
    "    \n",
    "    df[\"sigccm\"] = sigccm\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_attack_id5000[\"sigccm\"] = df_attack_id5000.sigccm.apply(\n",
    "                                lambda x: [list(x)]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add time steps to training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_train, win = 100)\n",
    "df_train_rows_5000_ccm_100_lstm_100 = df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_train, win = 100)\n",
    "df_train_rows_5000to6000_ccm_100_lstm_100 = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_train, win = 100)\n",
    "df_train_attack_step12_ccm_100_lstm_100 = df "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add time steps to test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_test, win = 100)\n",
    "df_test_rows_5000_ccm_100_lstm_100 = df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_test, win = 100)\n",
    "df_test_rows_5000to6000_ccm_100_lstm_100 = df  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = add_time_steps_df(df_sigccm_test, win = 100)\n",
    "df_test_attack_step12_ccm_100_lstm_100 = df "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IO Tools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def extracth5toarray(h5path, dataID):\n",
    "    f = h5py.File(h5path)\n",
    "    s = f[dataID]\n",
    "    return np.array(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def store_series_of_lists_in_h5file(df, dataID, colID1 = None, \n",
    "                                                colID2 = None):\n",
    "    \n",
    "    DataDir = \"data/\"\n",
    "    DataDir = DataDir + dataID + \"/\"  \n",
    "    \n",
    "    # If directory does not already exist\n",
    "    # for this batch, create it.\n",
    "    if not os.path.isdir(DataDir):\n",
    "        mkdir(DataDir)\n",
    "\n",
    "    col1 = df[colID1]\n",
    "    col2 = df[colID2]\n",
    "    \n",
    "    # get the dimensions of \n",
    "    length = len(col1)\n",
    "    col1_x, col1_y = np.array(col1[0]).shape\n",
    "    # col2_x, col2_y = np.array(col2).shape\n",
    "    \n",
    "    path = DataDir + dataID + \".h5\"\n",
    "    f = h5py.File(path) \n",
    "    \n",
    "    if colID1 != None:\n",
    "        dataset1 = f.create_dataset(colID1, (length, col1_x, col1_y), \n",
    "                                     dtype='f', \n",
    "                                     chunks=(1, col1_x, col1_y))    \n",
    "\n",
    "    if colID2 != None:        \n",
    "        dataset2 = f.create_dataset(colID2, (length,), \n",
    "                                     dtype='f', \n",
    "                                     chunks=(1,))          \n",
    "    \n",
    "    chunkshape1 = (col1_x, col1_y)\n",
    "    # chunkshape2 = (col2_x, col2_y)\n",
    "    for i, row in enumerate(col1):\n",
    "        shape1 = np.array(col1[i]).shape\n",
    "        # shape2 = np.array(col2[i]).shape\n",
    "        # if shape1 != chunkshape1 and shape2 != chunkshape2:\n",
    "        if shape1 != chunkshape1:    \n",
    "            print(\"Mismatch with element %d:\\n\" % (i))\n",
    "            print(\"chunkshape = %s\" % str(chunkshape1)) \n",
    "            continue\n",
    "        else:\n",
    "            dataset1[i] = col1[i]\n",
    "            dataset2[i] = col2[i]\n",
    "\n",
    "    f.close()\n",
    "    \n",
    "    return path     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Store LSTM-Ready Data in HDF5 for Use by Generators"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time steps have been added. \n",
    "\n",
    "Store SigCCMLSTM training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mismatch with element 2342:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2343:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2344:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2345:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2346:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2347:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2348:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2349:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2350:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2351:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2352:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2353:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2354:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2355:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2356:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2357:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2358:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2359:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2360:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2361:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2362:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2363:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2364:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2365:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2366:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2367:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2368:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2369:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2370:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2371:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2372:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2373:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2374:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2375:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2376:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2377:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2378:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2379:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2380:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2381:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2382:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2383:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2384:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2385:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2386:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2387:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2388:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2389:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2390:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2391:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2392:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2393:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2394:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2395:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2396:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2397:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2398:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2399:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2400:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2401:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2402:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2403:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2404:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2405:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2406:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2407:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2408:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2409:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2410:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2411:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2412:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2413:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2414:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2415:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2416:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2417:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2418:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2419:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2420:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2421:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2422:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2423:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2424:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2425:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2426:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2427:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2428:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2429:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2430:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2431:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2432:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2433:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2434:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2435:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2436:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2437:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2438:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2439:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 2440:\n",
      "\n",
      "chunkshape = (100, 10088)\n"
     ]
    }
   ],
   "source": [
    "df = df_train_attack_step12_ccm_100_lstm_100\n",
    "dataID = \"train_attack_step12_ccm_100_lstm_100\"\n",
    "h5path = store_series_of_lists_in_h5file(df, dataID, \n",
    "                                         \"sigccm\", \"Attack\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mismatch with element 5001:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5002:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5003:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5004:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5005:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5006:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5007:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5008:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5009:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5010:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5011:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5012:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5013:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5014:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5015:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5016:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5017:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5018:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5019:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5020:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5021:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5022:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5023:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5024:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5025:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5026:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5027:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5028:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5029:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5030:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5031:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5032:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5033:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5034:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5035:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5036:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5037:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5038:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5039:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5040:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5041:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5042:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5043:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5044:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5045:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5046:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5047:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5048:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5049:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5050:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5051:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5052:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5053:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5054:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5055:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5056:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5057:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5058:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5059:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5060:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5061:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5062:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5063:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5064:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5065:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5066:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5067:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5068:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5069:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5070:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5071:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5072:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5073:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5074:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5075:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5076:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5077:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5078:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5079:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5080:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5081:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5082:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5083:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5084:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5085:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5086:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5087:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5088:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5089:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5090:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5091:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5092:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5093:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5094:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5095:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5096:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5097:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5098:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 5099:\n",
      "\n",
      "chunkshape = (100, 10088)\n"
     ]
    }
   ],
   "source": [
    "df = df_rows_5000_ccm_100_lstm_100\n",
    "dataID = \"rows_5000_ccm_100_lstm_100\"\n",
    "h5path = store_series_of_lists_in_h5file(df, dataID, \n",
    "                                         \"sigccm\", \"Attack\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = extracth5toarray(h5path, \"sigccm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Store SigCCMLSTM test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mismatch with element 173:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 174:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 175:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 176:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 177:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 178:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 179:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 180:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 181:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 182:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 183:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 184:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 185:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 186:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 187:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 188:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 189:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 190:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 191:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 192:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 193:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 194:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 195:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 196:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 197:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 198:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 199:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 200:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 201:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 202:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 203:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 204:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 205:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 206:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 207:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 208:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 209:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 210:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 211:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 212:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 213:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 214:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 215:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 216:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 217:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 218:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 219:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 220:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 221:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 222:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 223:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 224:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 225:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 226:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 227:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 228:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 229:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 230:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 231:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 232:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 233:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 234:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 235:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 236:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 237:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 238:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 239:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 240:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 241:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 242:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 243:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 244:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 245:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 246:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 247:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 248:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 249:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 250:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 251:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 252:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 253:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 254:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 255:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 256:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 257:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 258:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 259:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 260:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 261:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 262:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 263:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 264:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 265:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 266:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 267:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 268:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 269:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 270:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 271:\n",
      "\n",
      "chunkshape = (100, 10088)\n"
     ]
    }
   ],
   "source": [
    "df = df_test_attack_step12_ccm_100_lstm_100\n",
    "dataID = \"test_attack_step12_ccm_100_lstm_100\"\n",
    "h5path = store_series_of_lists_in_h5file(df, dataID, \n",
    "                                         \"sigccm\", \"Attack\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'data/rows_5000_ccm_100_lstm_100/rows_5000_ccm_100_lstm_100.h5'"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mismatch with element 901:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 902:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 903:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 904:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 905:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 906:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 907:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 908:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 909:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 910:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 911:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 912:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 913:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 914:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 915:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 916:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 917:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 918:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 919:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 920:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 921:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 922:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 923:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 924:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 925:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 926:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 927:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 928:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 929:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 930:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 931:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 932:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 933:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 934:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 935:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 936:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 937:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 938:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 939:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 940:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 941:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 942:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 943:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 944:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 945:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 946:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 947:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 948:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 949:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 950:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 951:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 952:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 953:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 954:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 955:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 956:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 957:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 958:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 959:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 960:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 961:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 962:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 963:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 964:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 965:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 966:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 967:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 968:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 969:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 970:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 971:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 972:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 973:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 974:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 975:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 976:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 977:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 978:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 979:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 980:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 981:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 982:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 983:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 984:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 985:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 986:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 987:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 988:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 989:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 990:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 991:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 992:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 993:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 994:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 995:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 996:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 997:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 998:\n",
      "\n",
      "chunkshape = (100, 10088)\n",
      "Mismatch with element 999:\n",
      "\n",
      "chunkshape = (100, 10088)\n"
     ]
    }
   ],
   "source": [
    "df = df_rows_5000to6000_ccm_100_lstm_100\n",
    "dataID = \"rows_5000to6000_ccm_100_lstm_100\"\n",
    "h5path = store_series_of_lists_in_h5file(df, dataID, \n",
    "                                         \"sigccm\", \"Attack\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'data/rows_5000to6000_ccm_100_lstm_100/rows_5000to6000_ccm_100_lstm_100.h5'"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Miscellaneous info about shape of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5100, 91)"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rows_5000_ccm_100_lstm_100.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sigccm = df_rows_5000_ccm_100_lstm_100[\"sigccm\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 10088)"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(sigccm[0]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5100, 1)"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(df[\"Attack\"]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "attack2 = df_rows_5000_ccm_100_lstm_100[\"Attack\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5100,)"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attack2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attack2[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save Files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save Pickled Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after each phone's signal data has been assigned a column**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_signals.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_signals, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after signals have been normalized**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data for time period in which jamming occurred**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# This file is 1.4GB, i.e. it's **huge**\n",
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_attack_id5000.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_attack_id5000, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after column with CCM matrix has been added**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_signals_ccm.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_signals_ccm, fd) \n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_rows_2000_ccm_100.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_rows_2000_ccm_100, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_attack_step12.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_attack_step12, fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_attack_step12_sigccm_train.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_attack_step12_sigccm_train, fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_attack_step12_sigccm_test.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_attack_step12_sigccm_test, fd) \n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_train_attack_step12_ccm_100_lstm_100.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_train_attack_step12_ccm_100_lstm_100, fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_test_attack_step12_ccm_100_lstm_100.pkl\"\n",
    "fd = open(path, \"wb\")\n",
    "pkl.dump(df_test_attack_step12_ccm_100_lstm_100, fd) \n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# This throws a Memory error:\n",
    "#\n",
    "# PickledDir = \"Pickled Files/\"\n",
    "# path = PickledDir + \"df_attack_rows_5000_ccm_100_lstm_100.pkl\"\n",
    "# fd = open(path, \"wb\")\n",
    "# pkl.dump(df_attack_rows_5000_ccm_100_lstm_100, fd)\n",
    "# fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save to Dill File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import dill\n",
    "\n",
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_attack_rows_5000_ccm_100_lstm_100.dill\"\n",
    "fd = open(path, \"wb\")\n",
    "dill.dump(df_attack_rows_5000_ccm_100_lstm_100, fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save to HDF5 File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "DataDir = \"data/rows_5000_ccm_100_lstm_100/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fnm = \"rows_5000_ccm_100_lstm_100.h5\"\n",
    "path = DataDir + fnm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Using a DataFrame method**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "store = pd.HDFStore(path)\n",
    "store.is_open"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`store.put()` warns that performance might suffer, because PyTables is just going to pickle the objects (i.e. may as well use Pickle)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ">> store.put('df', df_rows_5000_ccm_100_lstm_100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "store.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Using `h5py`**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = df_rows_5000_ccm_100_lstm_100.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save to PyArrow-Parquet File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_rows_5000_ccm_100_lstm_100.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sigccm = df_rows_5000_ccm_100_lstm_100[\"sigccm\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigccm.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = df_rows_5000_ccm_100_lstm_100.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df[\"sigccm\"] = df.sigccm.apply(lambda x: np.array(x)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "table = pa.Table.from_pandas(df_rows_5000_ccm_100_lstm_100)\n",
    "pq.write_table(table, 'parquet.example1')\n",
    "table2 = pq.read_table('parquet.example1')\n",
    "df4 = table.to_pandas() \n",
    "df5 = table2.to_pandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load from Pickled Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Raw data** (after some cleaning)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_jamming.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_jamming = pkl.load(fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after each phone's signal data has been assigned a column**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = PickledDir + \"df_signals.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_signals = pkl.load(fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after signals have been normalized**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_norm.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_norm = pkl.load(fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data for time period in which jamming occurred**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_norm_attackperiod.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_norm_attackperiod = pkl.load(fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Attack period data that has been sampled (every 12 datapoints)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_attack_step12.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_attack_step12 = pkl.load(fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_attack_step12_sigccm_train.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_sigccm_train = pkl.load(fd)\n",
    "df_attack_step12_sigccm_train = df_sigccm_train \n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_attack_step12_sigccm_test.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_sigccm_test = pkl.load(fd)\n",
    "df_attack_step12_sigccm_test = df_sigccm_test \n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after column with CCM matrix has been added**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "DataDir = \"data/attack_period1/\"\n",
    "path = DataDir + \"df_attack_id5000.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_attack_id5000 = pkl.load(fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`df_attack_id5000` was saved without the proper nesting of the data in `sigccm`. Fix that problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_attack_id5000[\"sigccm\"] = df_attack_id5000.sigccm.apply(\n",
    "                                lambda x: [list(x)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data after LSTM time steps have been added**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_rows_2000_ccm_100_lstm_100.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_rows_2000_ccm_100_lstm_100 = pkl.load(fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_train_attack_step12_ccm_100_lstm_100.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_train_attack_step12_ccm_100_lstm_100 = pkl.load(fd)\n",
    "fd.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "PickledDir = \"Pickled Files/\"\n",
    "path = PickledDir + \"df_test_attack_step12_ccm_100_lstm_100.pkl\"\n",
    "fd = open(path, \"rb\")\n",
    "df_test_attack_step12_ccm_100_lstm_100 = pkl.load(fd)\n",
    "fd.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load from HDF5 File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "DataDir = \"data/rows_5000_ccm_100_lstm_100/\"\n",
    "hdf5_fnm = DataDir + \"rows_5000_ccm_100_lstm_100.h5\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read HDF5 data with DataFrame method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_hdf(hdf5_fnm)\n",
    "df_rows_5000_ccm_100_lstm_100 = df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Read HDF5 data with `h5py`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "f = h5py.File(hdf5_fnm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = f[\"df\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load from PyArrow-Parquet File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = df_rows_5000_ccm_100_lstm_100.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/john/anaconda3/envs/py36/lib/python3.6/site-packages/pandas/core/indexing.py:190: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "for i, e in enumerate(df.iterrows()):\n",
    "    df[\"sigccm\"].iloc[i] = np.array(df[\"sigccm\"].iloc[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Generator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generator in a Python Class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Using Python Class `getitem` as Generator**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class DataGenerator(keras.utils.Sequence):\n",
    "    'Generates data for Keras'\n",
    "    def __init__(self, batchID, \n",
    "                 batch_size = 32, \n",
    "                 dim = (32,32,32)):\n",
    "\n",
    "        self.dim = dim\n",
    "        self.batch_size = batch_size\n",
    "        self.datafile_IDs = []\n",
    "        self.labelfile_IDs = []\n",
    "        self.batchID = batchID    \n",
    "        self.DataDir = \"data/\"\n",
    "        self.BatchDir = \"\"\n",
    "        \n",
    "        DataDir = self.DataDir\n",
    "        BatchDir = DataDir + batchID + \"/\"\n",
    "        self.BatchDir = BatchDir\n",
    "        \n",
    "        path = BatchDir + \"datafilenames_\" + batchID + \".pkl\"                                    \n",
    "        fd = open(path, \"rb\")\n",
    "        self.datafile_IDs = pkl.load(fd)\n",
    "        fd.close()\n",
    "        \n",
    "        path = BatchDir + \"labelfilenames_\" + batchID + \".pkl\"        \n",
    "        fd = open(path, \"rb\")\n",
    "        self.labelfile_IDs = pkl.load(fd)\n",
    "        fd.close()\n",
    "\n",
    "    def __len__(self):\n",
    "        'Denotes the number of batches per epoch'\n",
    "        return int(\n",
    "            np.floor(len(self.datafile_IDs) / self.batch_size))\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        \n",
    "        'Generate one batch of data'\n",
    "        \n",
    "        datafn = self.datafile_IDs[index]        \n",
    "        labelfn = self.labelfile_IDs[index]  \n",
    "        \n",
    "        print(\"In getitem: index = %d, datafn = %s, labelfn = %s\" % (\n",
    "               index, datafn, labelfn))\n",
    "\n",
    "        batch_size = self.batch_size\n",
    "        \n",
    "        # Initialize data arrays for this batch     \n",
    "        X = np.empty((self.batch_size, *self.dim))\n",
    "        y = np.empty((self.batch_size), dtype=int)         \n",
    "\n",
    "        BatchDir = self.BatchDir\n",
    "\n",
    "        # Read data\n",
    "        datafn = BatchDir + datafn\n",
    "        X = np.load(datafn)\n",
    "\n",
    "        # Read label\n",
    "        labelfn = BatchDir + labelfn\n",
    "        y = np.load(labelfn)\n",
    "        \n",
    "        return X, y        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_input = df_lstm_100_rows_2000_ccm_100\n",
    "df_short = df_input[100:200].copy()\n",
    "df_test = df_input[200:300].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "genbatchfiles(df_short, batchID = \"short\", batch_size = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params = {'batchID': \"short\", 'batch_size': 20, 'dim': (100, 10088)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg = DataGenerator(**params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Older, More Complicated Version of Class-Style Generator**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def savedata(df, batchID, recs_per_id = 5):\n",
    "\n",
    "    DataDir = \"data/\"\n",
    "    BatchDir = DataDir + batchID + \"/\"\n",
    "    \n",
    "    # If directory does not already exist\n",
    "    # for this batch, create it.\n",
    "    if not os.path.isdir(BatchDir):\n",
    "        mkdir(BatchDir)\n",
    "\n",
    "    sigccm = df[\"sigccm\"]\n",
    "    attack = df[\"Attack\"]\n",
    "        \n",
    "    idcnt = 0\n",
    "    datafiles = []\n",
    "    labelfiles = []\n",
    "    \n",
    "    # number of records to process\n",
    "    nrecs = len(sigccm)\n",
    "    \n",
    "    for i in range(0, nrecs, recs_per_id):\n",
    "        \n",
    "        if i + recs_per_id > nrecs:\n",
    "            upperbound = nrecs \n",
    "        else: \n",
    "            upperbound = i + recs_per_id\n",
    "        \n",
    "        x = np.stack(sigccm[i : upperbound]) \n",
    "        y = np.stack(attack[i : upperbound]) \n",
    "        \n",
    "        fnm = 'data_{:s}{:02d}.npy'.format(batchID, idcnt)\n",
    "        datafiles.append(fnm)        \n",
    "        np.save(BatchDir + fnm, x)\n",
    "        \n",
    "        fnm = 'labels_{:s}{:02d}.npy'.format(batchID, idcnt)\n",
    "        labelfiles.append(fnm)        \n",
    "        np.save(BatchDir + fnm, y)\n",
    "        \n",
    "        idcnt = idcnt + 1\n",
    "        \n",
    "    path = BatchDir + \"datafilenames_\" + batchID + \".pkl\"\n",
    "    \n",
    "    fd = open(path, \"wb\")\n",
    "    pkl.dump(datafiles, fd)\n",
    "    fd.close() \n",
    "\n",
    "    path = BatchDir + \"labelfilenames_\" + batchID + \".pkl\"\n",
    "    \n",
    "    fd = open(path, \"wb\")\n",
    "    pkl.dump(labelfiles, fd)\n",
    "    fd.close()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class DataGenerator(keras.utils.Sequence):\n",
    "    'Generates data for Keras'\n",
    "    def __init__(self, batchID, batch_size=32, \n",
    "                 dim=(32,32,32), shuffle = False):\n",
    "        'Initialization'\n",
    "        self.dim = dim\n",
    "        self.batch_size = batch_size\n",
    "        self.datafile_IDs = []\n",
    "        self.labelfile_IDs = []\n",
    "        self.batchID = batchID    \n",
    "        self.DataDir = \"data/\"\n",
    "        self.BatchDir = \"\"\n",
    "        self.shuffle = shuffle\n",
    "        # self.on_epoch_end() \n",
    "        \n",
    "        DataDir = self.DataDir\n",
    "        BatchDir = DataDir + batchID + \"/\"\n",
    "        self.BatchDir = BatchDir\n",
    "        \n",
    "        path = BatchDir + \"datafilenames_\" + batchID + \".pkl\"                                    \n",
    "        fd = open(path, \"rb\")\n",
    "        self.datafile_IDs = pkl.load(fd)\n",
    "        fd.close()\n",
    "        \n",
    "        path = BatchDir + \"labelfilenames_\" + batchID + \".pkl\"        \n",
    "        fd = open(path, \"rb\")\n",
    "        self.labelfile_IDs = pkl.load(fd)\n",
    "        fd.close()\n",
    "\n",
    "    def __len__(self):\n",
    "        'Denotes the number of batches per epoch'\n",
    "        return int(\n",
    "            np.floor(len(self.datafile_IDs) / self.batch_size))\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        \n",
    "        'Generate one batch of data'\n",
    "        \n",
    "        # Find file names for the batch   \n",
    "        \n",
    "        # Here \"batch size\" = Number of files we read in for\n",
    "        # each element (index value) of the DataGenerator object\n",
    "        batch_size = self.batch_size\n",
    "        datafile_IDs = self.datafile_IDs[\n",
    "             index * batch_size : (index + 1) * batch_size]        \n",
    "        labelfile_IDs = self.labelfile_IDs[\n",
    "             index * batch_size : (index + 1) * batch_size]        \n",
    "        \n",
    "        # Generate data\n",
    "        X, y = self.__data_generation(datafile_IDs, labelfile_IDs)\n",
    "\n",
    "        return X, y\n",
    "\n",
    "    # def on_epoch_end(self):\n",
    "    #     'Updates indexes after each epoch'\n",
    "        # self.indexes = np.arange(len(self.list_IDs))\n",
    "        # if self.shuffle == True:\n",
    "        #     np.random.shuffle(self.indexes)\n",
    "    #    print(\"Call to routine on_epoch_end()\")\n",
    "\n",
    "    def __data_generation(self, datafile_IDs, labelfile_IDs):\n",
    "        \n",
    "        'Generates data containing batch_size samples' \n",
    "        \n",
    "        BatchDir = self.BatchDir\n",
    "        \n",
    "        # X : (n_samples, *dim, n_channels)\n",
    "        \n",
    "        # Initialize data arrays for this batch     \n",
    "        X = np.empty((self.batch_size, *self.dim))\n",
    "        y = np.empty((self.batch_size), dtype=int)         \n",
    "        \n",
    "        data_arrays = []\n",
    "        label_arrays = []\n",
    "        \n",
    "        # Generate data\n",
    "        for datafn, labelfn in zip(datafile_IDs, labelfile_IDs):\n",
    "            \n",
    "            # Store data\n",
    "            datafn = BatchDir + datafn\n",
    "            dat = np.load(datafn)\n",
    "            data_arrays.append(dat)\n",
    "\n",
    "            # Store label\n",
    "            labelfn = BatchDir + labelfn\n",
    "            lbl = np.load(labelfn)\n",
    "            label_arrays.append(lbl)\n",
    "\n",
    "        X = np.vstack(data_arrays)\n",
    "        y = np.vstack(label_arrays)\n",
    "        \n",
    "        return X, y        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_input = df_lstm_100_rows_2000_ccm_100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_short200 = df_input[100:300].copy()\n",
    "df_test = df_input[300:400].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "batchID = \"short200\"\n",
    "\n",
    "savedata(df_short200, batchID, recs_per_id = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 10, 'dim': (100, 10088), 'shuffle': False}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pd.DataFrame(sigccm[0]).shape\n",
    "# (100, 10088)\n",
    "params = {'dim': (100, 10088),\n",
    "          'batch_size': 10,\n",
    "          'shuffle': False}\n",
    "params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg = DataGenerator(batchID = \"short\", **params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X, y = dg[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 100, 10088)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generator Based on Numpy IO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Batch Generation Using Numpy IO**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def genbatchfiles(df, batchID, batch_size = 5):\n",
    "\n",
    "    DataDir = \"data/\"\n",
    "    BatchDir = DataDir + batchID + \"/\"\n",
    "    \n",
    "    # If directory does not already exist\n",
    "    # for this batch, create it.\n",
    "    if not os.path.isdir(BatchDir):\n",
    "        mkdir(BatchDir)\n",
    "\n",
    "    sigccm = df[\"sigccm\"]\n",
    "    attack = df[\"Attack\"]\n",
    "        \n",
    "    idcnt = 0\n",
    "    datafiles = []\n",
    "    labelfiles = []\n",
    "    \n",
    "    # number of records to process\n",
    "    nrecs = len(sigccm)\n",
    "    print(\"Number of records: %d\" % nrecs)\n",
    "    \n",
    "    for i in range(0, nrecs, batch_size):\n",
    "        \n",
    "        if i + batch_size > nrecs:\n",
    "            # upperbound = nrecs \n",
    "            \n",
    "            # if we don't have enough records left \n",
    "            # to make a complete batch, just bail out\n",
    "            break\n",
    "        else: \n",
    "            upperbound = i + batch_size            \n",
    "        \n",
    "        x = np.stack(sigccm[i : upperbound]) \n",
    "        y = np.stack(attack[i : upperbound]) \n",
    "        \n",
    "        fnm = 'data_{:s}{:02d}.npy'.format(batchID, idcnt)\n",
    "        datafiles.append(fnm)        \n",
    "        np.save(BatchDir + fnm, x)\n",
    "               \n",
    "        fnm = 'labels_{:s}{:02d}.npy'.format(batchID, idcnt)\n",
    "        labelfiles.append(fnm)        \n",
    "        np.save(BatchDir + fnm, y)\n",
    "        \n",
    "        idcnt = idcnt + 1            \n",
    "        \n",
    "    path = BatchDir + \"datafilenames_\" + batchID + \".pkl\"\n",
    "    \n",
    "    fd = open(path, \"wb\")\n",
    "    pkl.dump(datafiles, fd)\n",
    "    fd.close() \n",
    "\n",
    "    path = BatchDir + \"labelfilenames_\" + batchID + \".pkl\"\n",
    "    \n",
    "    fd = open(path, \"wb\")\n",
    "    pkl.dump(labelfiles, fd)\n",
    "    fd.close()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of records: 5100\n"
     ]
    }
   ],
   "source": [
    "data = df_rows_5000_ccm_100_lstm_100\n",
    "batchID = \"rows_5000_ccm_100_lstm_100\" \n",
    "batch_size = 200\n",
    "\n",
    "genbatchfiles(data,\n",
    "              batchID = batchID, \n",
    "              batch_size = batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data Generator Based on Numpy IO**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def data_generator(batchID, \n",
    "                   batch_size = 32, \n",
    "                   dim = (20, 100)):\n",
    "\n",
    "    print(\"In data_generator.\")   \n",
    "    \n",
    "    outputshape = (batch_size, *dim)\n",
    "    \n",
    "    DataDir = \"data/\"\n",
    "    BatchDir = DataDir + batchID + \"/\"\n",
    "    \n",
    "    datafile_IDs = []\n",
    "    labelfile_IDs = []\n",
    "\n",
    "    path = BatchDir + \"datafilenames_\" + batchID + \".pkl\"                                    \n",
    "    fd = open(path, \"rb\")\n",
    "    datafile_IDs = pkl.load(fd)\n",
    "    fd.close()\n",
    "\n",
    "    path = BatchDir + \"labelfilenames_\" + batchID + \".pkl\"        \n",
    "    fd = open(path, \"rb\")\n",
    "    labelfile_IDs = pkl.load(fd)\n",
    "    fd.close()       \n",
    "\n",
    "    while True:\n",
    "        for index in range(len(datafile_IDs)):    \n",
    "\n",
    "            'Generate one batch of data'\n",
    "\n",
    "            datafn = datafile_IDs[index]        \n",
    "            labelfn = labelfile_IDs[index]  \n",
    "\n",
    "            # Initialize data arrays for this batch     \n",
    "            # X = np.empty((batch_size, *dim))\n",
    "            # y = np.empty((batch_size), dtype=int)         \n",
    "\n",
    "            # Read data\n",
    "            datapath = BatchDir + datafn\n",
    "            X = np.load(datapath)\n",
    "\n",
    "            # Read label\n",
    "            labelpath = BatchDir + labelfn\n",
    "            y = np.load(labelpath) \n",
    "\n",
    "            if outputshape != X.shape:\n",
    "                msg = \"Wrong shape: \"\n",
    "                idx = \"index = {:d}, \".format(index)\n",
    "                fnm = \"datafn = {:s}, \".format(datafn)\n",
    "                shp = \"X.shape = {:s}\".format(str(X.shape))\n",
    "                msg = msg + idx + fnm + shp\n",
    "                print(msg)\n",
    "\n",
    "            else: \n",
    "\n",
    "                yield X, y                 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params = {'batchID': \"rows_5000_ccm_100_lstm_100\", \n",
    "          'batch_size': 200, 'dim': (100, 10088)} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg = data_generator(**params) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generator Based on HD5 IO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Target data must have the shape `(num_samples, num_classes)` according fchollet himself. See [this StackOverflow post](https://github.com/keras-team/keras/issues/9233)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def data_generator(dataID,\n",
    "                   batch_size, \n",
    "                   dim = (20, 100)):      \n",
    "    \n",
    "    print(\"\\nIn data_generator.\\n\")      \n",
    "\n",
    "    DataDir = \"data/\"\n",
    "    BatchDir = DataDir + dataID + \"/\"\n",
    "    h5path = BatchDir + dataID + \".h5\"\n",
    "    \n",
    "    f = h5py.File(h5path, \"r\")\n",
    "    data = f[\"sigccm\"]\n",
    "    labels = f[\"Attack\"]\n",
    "\n",
    "    # number of records to process\n",
    "    nrecs = len(data)\n",
    "\n",
    "    f.close()\n",
    "    \n",
    "    outputshape = (batch_size, *dim)\n",
    "    \n",
    "    while True:            \n",
    "\n",
    "        f = h5py.File(h5path, \"r\")\n",
    "        data = f[\"sigccm\"]\n",
    "        labels = f[\"Attack\"] \n",
    "        \n",
    "        for i in range(0, nrecs, batch_size):\n",
    "\n",
    "            'Generate one batch of data'\n",
    "            \n",
    "            if i + batch_size > nrecs:\n",
    "                \n",
    "                # upperbound = nrecs \n",
    "                \n",
    "                # If we can get a complete batch\n",
    "                # out of the remaining data, go\n",
    "                # ahead and wrap up this epoch and\n",
    "                # start the next one.\n",
    "                \n",
    "                break\n",
    "                \n",
    "            else: \n",
    "                upperbound = i + batch_size\n",
    "                # print(\"\\ndata[%d : %d]\\n\" % (i, upperbound))\n",
    "                X = np.array(data[i : upperbound]) \n",
    "                y = np.array(labels[i : upperbound])             \n",
    "            \n",
    "            if outputshape != X.shape:\n",
    "                msg = \"Wrong shape: \"\n",
    "                idx = \"index = {:d}, \".format(index)\n",
    "                shp = \"X.shape = {:s}\".format(str(X.shape))\n",
    "                msg = msg + idx + shp\n",
    "                print(msg)\n",
    "\n",
    "            else:\n",
    "\n",
    "                # Label (Attack) field has an extra\n",
    "                # nested array dimension. Get rid of it.\n",
    "                \n",
    "                u = np.array(y)\n",
    "                y = np.resize(u, (batch_size, 1))\n",
    "                yield X, y  \n",
    "                \n",
    "        f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Generator for Data Sampled Every 12 Steps**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create generator for training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 90,\n",
       " 'dataID': 'train_attack_step12_ccm_100_lstm_100',\n",
       " 'dim': (100, 10088)}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_train = {'dataID': \"train_attack_step12_ccm_100_lstm_100\",\n",
    "          'batch_size': 90,\n",
    "          'dim': (100, 10088)}\n",
    "params_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg_train = data_generator(**params_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create generator for test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 90,\n",
       " 'dataID': 'test_attack_step12_ccm_100_lstm_100',\n",
       " 'dim': (100, 10088)}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_test = {'dataID': \"test_attack_step12_ccm_100_lstm_100\",\n",
    "               'batch_size': 90,\n",
    "               'dim': (100, 10088)}\n",
    "params_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg_validation = data_generator(**params_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Generator for First 5,000 Records of Attack Period**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create generator for training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 200,\n",
       " 'dataID': 'train_attack_5000_ccm_100_lstm_100',\n",
       " 'dim': (100, 10088)}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_train = {'dataID': \"train_attack_5000_ccm_100_lstm_100\",\n",
    "          'batch_size': 200,\n",
    "          'dim': (100, 10088)}\n",
    "params_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg_train = data_generator(**params_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create generator for test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 200,\n",
       " 'dataID': 'rows_5000to6000_ccm_100_lstm_100',\n",
       " 'dim': (100, 10088)}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_test = {'dataID': \"rows_5000to6000_ccm_100_lstm_100\",\n",
    "               'batch_size': 200,\n",
    "               'dim': (100, 10088)}\n",
    "params_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dg_validation = data_generator(**params_test) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Experiments."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Target data must have the shape `(num_samples, num_classes)` according fchollet himself. See [this StackOverflow post](https://github.com/keras-team/keras/issues/9233)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cnt = 0\n",
    "for X, y in dg_train:\n",
    "    if cnt > 0:\n",
    "        break\n",
    "    # print(y.shape)\n",
    "    # print(y)\n",
    "    X2 = X\n",
    "    y2 = y\n",
    "    u2 = u\n",
    "    cnt = cnt + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((200, 100, 10088), (200, 1), (200,))"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X2.shape, y2.shape, u2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200,)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array(np.random.rand(200))\n",
    "a.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LSTM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **batch_size** determines the number of samples in each mini batch amd allows us to adjust between two extremes: accurate gradient direction (large batch size) VS. fast iteration (small batch size). \n",
    "  * _Maximum_: the number of all samples\n",
    "  * _Gradient Descent_: become increasingly accurate as batch size approaches total number of samples\n",
    "  * _Loss_: decreases as batch size approaches the number of samples (??), provided the learning rate is small enough.\n",
    "  * _Speed of Iterations_: decreases as batch size approaches the minimum of 1. \n",
    "  * _Stochastic gradient descent_: What we get with a batch size = 1. Fast but the direction of the gradient step is based only on one example, the loss may jump around. \n",
    "  * _Maximum Batch Size_: may be limited if your model + data set does not fit into the available (GPU) memory.\n",
    "  \n",
    "* **steps_per_epoch:** <font color=\"blue\">**_the number of samples in your dataset divided by the batch size, or 1 if that cannot be determined_**</font>. Keras interprets this as the number of batch iterations before a training epoch is considered finished. If you have a training set of fixed size you can ignore it but it may be useful if you have a huge data set or if you are generating random data augmentations on the fly, i.e. if your training set has a (generated) infinite size. If you have the time to go through your whole training data set I recommend to skip this parameter.\n",
    "* **validation_steps** similar to steps_per_epoch but on the validation data set instead on the training data. If you have the time to go through your whole validation data set I recommend to skip this parameter.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build the LSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.1.2'"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 10088, 1)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series_length, input_dim, output_dim = 100, 10088, 1\n",
    "time_series_length, input_dim, output_dim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Build the model\n",
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# I arbitrarily picked the output dimensions as 20\n",
    "model.add(LSTM(200, \n",
    "            input_shape=(time_series_length, input_dim))) \n",
    "\n",
    "# model.add(Dense(output_dim, activation='relu'))\n",
    "model.add(Dense(output_dim, activation='sigmoid'))\n",
    "\n",
    "model.compile(loss='mean_squared_error',\n",
    "              optimizer='sgd',\n",
    "              metrics=['accuracy'])\n",
    "# model.compile(loss='mae', optimizer='adam') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example datafile: `data_rows_5000_ccm_100_lstm_100_id00.npy`\n",
    "\n",
    "**steps_per_epoch** = the number of samples in your dataset divided by the batch size, or 1 if that cannot be determined."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 12, Sampled Data, 100 Epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_datarecs, num_testrecs = 2441, 272"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(27, 3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = params_train[\"batch_size\"]\n",
    "# subtract 100 to account for bad records that were discarded\n",
    "steps_per_epoch = int(np.floor((num_datarecs) / batch_size))\n",
    "validation_steps = int(np.floor((num_testrecs) / batch_size))\n",
    "steps_per_epoch, validation_steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing spew to make notebook render on Github\n",
    "history = model.fit_generator(generator = dg_train,\n",
    "                    validation_data = dg_validation,\n",
    "                    validation_steps = validation_steps,\n",
    "                    steps_per_epoch = steps_per_epoch,\n",
    "                    epochs=100, \n",
    "                    verbose=1,\n",
    "                    workers=1,\n",
    "                    max_queue_size=1, \n",
    "                    use_multiprocessing=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the training and test loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot history\n",
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Make Predictions and Plot ROC-AUC Metric"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate ROC-AUC for a single batch of test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_test, y_test = next(dg_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "aucurve = auc(fpr, tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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wDXXeNZ/P3r0KN988w3x8fEAFC1alCuvvBKAzZs307RpUwBat27Nhx9+eEGxGmP+LD09nRtvvJFp06bxxBNPsH79+j/14n3JzUtS5wMPich7QBxwRAtgPuHZTzaSsLtgu8NRZS/Pdxxv2rRpXH311Zw8eZL69etz++23U7JkSX777TdiYmIYNmwYqampNGvWjI8//pjSpUvz/vvvM2jQIKZNm0aXLl3o06cPAIMHD2bq1Kn079//T8f4+uuvefTRR884dvHixVm6dOmfntu1axcRERFZ+xEREezadebY8ZYtW0hNTaV58+YcO3aMhx9+mB49epCUlETp0qW5//77WbduHfXq1eO1117j0ksvJSYmhvnz59OxY0c++OADkpOTz/hcY8y5O3jwIFdffTVhYWG88MILlCtXjtjYWL/G4LOkICLvAs2BUiKSAgwFigCo6kRgAXALkAicAO73VSz+MGbMGObNmwdAcnIyW7dupWTJkoSFhXH77bcDnr+wN2zYQOvWrQHPXwNlyniW1t2wYQODBw/m8OHDHD9+nLZt255xjBYtWrB27Vqv4tFcxh5zuyIoLS2N1atXs2jRIk6ePEmjRo1o2LAhaWlprFmzhrFjxxIXF8fDDz/Miy++yHPPPce0adMYMGAAw4YN47bbbqNo0aLe/SMZY3KlqrzzzjtZ/8/69OlD586dXYnFl1cf3Z3P6wr8vaCP6+uZ+dwsXryYr776imXLllG8eHGaN2+edY1+sWLFCAsLAzzf+Ojo6KwJ2+x69erFRx99xA033MD06dNZvHjxGW3OpacQERFBSkpK1n5KSgply5Y9470RERGUKlWKSy+9lEsvvZSmTZuybt06mjRpQkREBHFxcQDccccdvPjiiwDUrFmTL774AvD0ND777DNv/pmMMblITk6mX79+LFiwgIYNG9K4cWNX47HaRwXgyJEjXHXVVRQvXpyffvqJ5cuX59quRo0a7N+/PysppKamsnHjRgCOHTtGmTJlSE1N5Z133sn1/Zk9hZyPnAkBoEyZMpQoUYLly5ejqrz11lt07NjxjHYdO3bk22+/JS0tjRMnTrBixQoiIyO57rrrKFeuHJs3bwZg0aJFREVFAbBv3z4AMjIyeP755+nXr985/osZYwDeffddoqOjWbx4Ma+++irfffdd1v8ztwRFmQu3tWvXjokTJ1K7dm1q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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr, tpr, \n",
    "         label='area = {:.3f}'.format(aucurve))\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5000 Records of Attack Data, 100 Epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "num_datarecs, num_testrecs = 5000, 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = params_train[\"batch_size\"]\n",
    "# subtract 100 to account for bad records that were discarded\n",
    "steps_per_epoch = int(np.floor((num_datarecs) / batch_size))\n",
    "validation_steps = int(np.floor((num_testrecs) / batch_size))\n",
    "steps_per_epoch, validation_steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "In data_generator.\n",
      "\n",
      "Epoch 1/100\n",
      "24/25 [===========================>..] - ETA: 9s - loss: 0.1302 - acc: 0.8281 \n",
      "In data_generator.\n",
      "\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1299 - acc: 0.8292 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 2/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1216 - acc: 0.8584 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 3/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1216 - acc: 0.8584 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 4/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 5/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 6/100\n",
      "25/25 [==============================] - 253s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1311 - val_acc: 0.7780\n",
      "Epoch 7/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 8/100\n",
      "25/25 [==============================] - 253s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 9/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 10/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 11/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1215 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 12/100\n",
      "25/25 [==============================] - 256s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 13/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 14/100\n",
      "25/25 [==============================] - 256s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 15/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 16/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 17/100\n",
      "25/25 [==============================] - 255s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 18/100\n",
      "25/25 [==============================] - 256s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 19/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 20/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 21/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1214 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 22/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 23/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 24/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 25/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 26/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 27/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 28/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 29/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 30/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 31/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 32/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1213 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 33/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 34/100\n",
      "25/25 [==============================] - 263s 11s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 35/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 36/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 37/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 38/100\n",
      "25/25 [==============================] - 253s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 39/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1310 - val_acc: 0.7780\n",
      "Epoch 40/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 41/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 42/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 43/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1212 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 44/100\n",
      "25/25 [==============================] - 263s 11s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 45/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 46/100\n",
      "25/25 [==============================] - 256s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 47/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 48/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 49/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 50/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 51/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 52/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1211 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 53/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 54/100\n",
      "25/25 [==============================] - 263s 11s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 55/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 56/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 57/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 58/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 59/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 60/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 61/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1210 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 62/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 63/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 64/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 65/100\n",
      "25/25 [==============================] - 256s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1309 - val_acc: 0.7780\n",
      "Epoch 66/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 67/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 68/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 69/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1209 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 70/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 71/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 72/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 73/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 74/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 75/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 76/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 77/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1208 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 78/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 79/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 80/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 81/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 82/100\n",
      "25/25 [==============================] - 259s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 83/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 84/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1207 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 85/100\n",
      "25/25 [==============================] - 264s 11s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 86/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 87/100\n",
      "25/25 [==============================] - 263s 11s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 88/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 89/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 90/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1206 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 91/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1205 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 92/100\n",
      "25/25 [==============================] - 257s 10s/step - loss: 0.1205 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 93/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1205 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 94/100\n",
      "25/25 [==============================] - 263s 11s/step - loss: 0.1205 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 95/100\n",
      "25/25 [==============================] - 258s 10s/step - loss: 0.1205 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 96/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1204 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 97/100\n",
      "25/25 [==============================] - 262s 10s/step - loss: 0.1204 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 98/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1204 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 99/100\n",
      "25/25 [==============================] - 261s 10s/step - loss: 0.1204 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n",
      "Epoch 100/100\n",
      "25/25 [==============================] - 260s 10s/step - loss: 0.1204 - acc: 0.8584 - val_loss: 0.1308 - val_acc: 0.7780\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(generator = dg_train,\n",
    "                    validation_data = dg_validation,\n",
    "                    validation_steps = validation_steps,\n",
    "                    steps_per_epoch = steps_per_epoch,\n",
    "                    epochs=100, \n",
    "                    verbose=1,\n",
    "                    workers=1,\n",
    "                    max_queue_size=1, \n",
    "                    use_multiprocessing=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the training and test loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot history\n",
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Make Predictions and Plot ROC-AUC Metric"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate ROC-AUC for a single batch of test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_test, y_test = next(dg_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "aucurve = auc(fpr, tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr, tpr, \n",
    "         label='area = {:.3f}'.format(aucurve))\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacked LSTMs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 10088, 1)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series_length, input_dim, output_dim = 100, 10088, 1\n",
    "time_series_length, input_dim, output_dim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = params_train[\"batch_size\"]\n",
    "batch_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# NOTE how batch_input_shape has one more parameter\n",
    "# than input_shape. The tuple describing the input\n",
    "# shape has 3 elements instead of 2, the first of which\n",
    "# is the new one.\n",
    "model.add(LSTM(20, return_sequences=True, stateful = True,\n",
    "            batch_input_shape=(\n",
    "                batch_size, time_series_length, input_dim))) \n",
    "model.add(LSTM(20, return_sequences=True, stateful = True)) \n",
    "model.add(LSTM(20, stateful = True))\n",
    "\n",
    "# model.add(Dense(output_dim, activation='relu'))\n",
    "model.add(Dense(output_dim, activation='sigmoid'))\n",
    "\n",
    "model.compile(loss='mean_squared_error',\n",
    "              optimizer='sgd',\n",
    "              metrics=['accuracy'])\n",
    "# model.compile(loss='mae', optimizer='adam') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "num_datarecs, num_testrecs = 2441, 272"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_train[\"batch_size\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(27, 3)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = params_train[\"batch_size\"]\n",
    "# subtract 100 to account for bad records that were discarded\n",
    "steps_per_epoch = int(np.floor((num_datarecs) / batch_size))\n",
    "validation_steps = int(np.floor((num_testrecs) / batch_size))\n",
    "steps_per_epoch, validation_steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "In data_generator.\n",
      "\n",
      "Epoch 1/10\n",
      "26/27 [===========================>..] - ETA: 1s - loss: 0.1866 - acc: 0.8496\n",
      "In data_generator.\n",
      "\n",
      "27/27 [==============================] - 30s 1s/step - loss: 0.1895 - acc: 0.8189 - val_loss: 0.2385 - val_acc: 0.4259\n",
      "Epoch 2/10\n",
      "27/27 [==============================] - 30s 1s/step - loss: 0.1564 - acc: 0.8189 - val_loss: 0.2428 - val_acc: 0.4259\n",
      "Epoch 3/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1489 - acc: 0.8189 - val_loss: 0.2465 - val_acc: 0.4259\n",
      "Epoch 4/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1448 - acc: 0.8189 - val_loss: 0.2497 - val_acc: 0.4259\n",
      "Epoch 5/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1422 - acc: 0.8189 - val_loss: 0.2522 - val_acc: 0.4259\n",
      "Epoch 6/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1404 - acc: 0.8189 - val_loss: 0.2543 - val_acc: 0.4259\n",
      "Epoch 7/10\n",
      "27/27 [==============================] - 30s 1s/step - loss: 0.1392 - acc: 0.8189 - val_loss: 0.2559 - val_acc: 0.4259\n",
      "Epoch 8/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1382 - acc: 0.8189 - val_loss: 0.2572 - val_acc: 0.4259\n",
      "Epoch 9/10\n",
      "27/27 [==============================] - 30s 1s/step - loss: 0.1375 - acc: 0.8189 - val_loss: 0.2582 - val_acc: 0.4259\n",
      "Epoch 10/10\n",
      "27/27 [==============================] - 29s 1s/step - loss: 0.1369 - acc: 0.8189 - val_loss: 0.2590 - val_acc: 0.4259\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(generator = dg_train,\n",
    "                    validation_data = dg_validation,\n",
    "                    validation_steps = validation_steps,\n",
    "                    steps_per_epoch = steps_per_epoch,\n",
    "                    epochs=10, \n",
    "                    verbose=1,\n",
    "                    workers=1,\n",
    "                    max_queue_size=1, \n",
    "                    use_multiprocessing=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the training and test loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot history\n",
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90/90 [==============================] - 1s 7ms/step\n",
      "\n",
      "test loss:  0.1466633528470993\n",
      "test accuracy:  0.7777777910232544\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_acc = model.evaluate(X_test, y_test,\n",
    "                                        batch_size = batch_size)\n",
    "print(\"\\ntest loss: \", test_loss)\n",
    "print(\"test accuracy: \", test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Make Predictions and Plot ROC-AUC Metric"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate ROC-AUC for a single batch of test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test, y_test = next(dg_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((90, 100, 10088), (90, 1))"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that with a stateful LSTM, you have to specify the batch_size with the `predict()` method as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test, batch_size = batch_size).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "aucurve = auc(fpr, tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr, tpr, \n",
    "         label='area = {:.3f}'.format(aucurve))\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py36]",
   "language": "python",
   "name": "conda-env-py36-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
